---
title: "Differential gene expression clusters"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    embed-resources: true
    code-fold: show
params:
  fig.path: "`r paste0(params$fig.path)`" #./Figures/
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(#fig.width = 6.6929133858,
  fig.path      = params$fig.path,#"../Figures/",
  fig.align     = "center",
  message       = FALSE,
  warning       = FALSE,
  dev           = c("jpeg", "pdf"),
  dpi           = 300,
  fig.process = function(filename){
    new_filename <- stringr::str_remove(string = filename,
                                        pattern = "-1")
    fs::file_move(path = filename, new_path = new_filename)
    ifelse(fs::file_exists(new_filename), new_filename, filename)
  }
  )
# setwd("/Users/vilkal/work/Brolidens_work/Projects/ST_DMPA/src")
```

```{r background_job, eval=FALSE, include=FALSE}
source("../bin/render_with_jobs.R")
file_name <- "./05_DGE_clusters_st_data.md"

file <- paste0(basename(xfun::sans_ext(file_name)), '_', Sys.Date(), '.html')

# quarto
# render_html_with_job(out_dir = lab_dir)
# fs::file_move(path = file, new_path = paste0(lab_dir, file))

# currently using quarto for github and kniter for html due to source code option 
render_git_with_job(fig_path = "../Figures/05/")

# kniter
knit_html_with_job(out_dir = "../lab_book/05_DGE_clusters_st_data", fig_path = "./Figures/05/")
```

## Load data and libraries

```{r Load_data}
##################
# LOAD LIBRARIES #
##################
library(tidyverse)
library(Seurat)
library(SeuratObject)
library(tidyseurat)
library(cowplot)
library(ggrepel)
library(niceRplots)
library(MAST)
library(scran)
library(openxlsx)

source("../bin/plotting_functions.R")

#########
# PATHS #
#########
input_dir <- "../results/04_deconvolution_st_data/"
result_dir <- "../results/05_DGE_clusters_st_data/"
marker_dir <- "./marker_genes_clusters/"
if( isFALSE(dir.exists(result_dir)) ) { dir.create(result_dir,recursive = TRUE) }
if( isFALSE(dir.exists(marker_dir)) ) { dir.create(marker_dir,recursive = TRUE) }

#############
# LODA DATA #
#############
DATA <- readRDS(paste0(input_dir,"seuratObj_deconvolution.RDS"))
```

```{r Functions}
########################
# PAIRWISE WILCOX TEST #
########################
pairwise_DGEs <- function(obj, groups, p.value = 1, logFC = 0, lvl = NA) {
  g <- unique(obj@meta.data[[groups]])
  if(!(is.na(lvl))){
    l <- factor(g, levels = lvl)
    g <- g[order(l)]}

  comb_uniq <- apply(combn(g,2),2,paste,collapse='_')
  
  pwt <- pairwiseWilcox(obj@assays$RNA@data, groups=obj@meta.data[[groups]], lfc = logFC)
  names <- paste(pwt[["pairs"]][,1], pwt[["pairs"]][,2], sep = "_")
  
  dfs <- pwt[["statistics"]] %>%
    set_names(., names) %>%
    .[comb_uniq] %>%
    map(., ~as_tibble(.x, rownames = "gene")) %>%
    map(., ~filter(.x, p.value <= p.value)) %>%
    imap(., ~mutate(.x, combination = .y))
  return(dfs)
}

```

```{r DGE_analysis}
########################
# SEURAT DGEs FUNCTION #
########################
DGEs_wilcox.fun <- function(obj, condition, subgroup = NULL, comp = "pairwise"){
  c_groups <- unique(pull(obj, condition))
  if(comp == "ONEvsALL"){
    # one group vs all other groups (use condition also for subgroups)
    comb <- tibble(V1 = c_groups, 
                   V2 = vector(mode = 'list', length = length(c_groups))) %>% 
            mutate(subset = list(NULL)) %>%
            mutate(n = paste0(V1,"_all"))
  }else{
    # pairwise comparison of subgroups
    s_groups <- unique(pull(obj, subgroup)) %>% set_names()
    comb <- combn(c_groups,2) %>% 
      t() %>% as_tibble() %>% 
      mutate(subset = list(s_groups)) %>%
      unnest(., c(subset)) %>%
      mutate(n = .$subset)
  }
  
   DGEs_list <- pmap(comb, 
        ~FindMarkers(obj,
                     ident.1 = ..1,
                     ident.2 = ..2,
                     group.by = condition,
                     subset.ident = ..3,
                     test.use = "wilcox",
                     only.pos = F,
                     return.thresh = 1,
                     max.cells.per.ident = Inf,
                     logfc.threshold = -Inf,
                     assay = "RNA",
                     min.pct = -Inf)) %>%
     set_names(comb$n)
  
    DGEs_table <- DGEs_list %>%
      map(., ~as_tibble(.x, rownames = "gene")) %>%
      map2(., comb$n, ~mutate(.x, Combination = .y)) %>%
      bind_rows(., .id = "group") %>%
      mutate(pct.diff = -.$pct.2-.$pct.1) %>%
      mutate(log.pct.diff = -log2(.$pct.2/.$pct.1))
    
    #return(list(DGEs_table, comb))
    return(DGEs_table)
}

```

```{r DGEs, eval=FALSE, include=TRUE}
##################
# SUBSETING DATA #
##################
# tidy code:
# creating a subseted object with 200 spots selected from each clusters
DATA_sub <- DATA %>%
  filter(grepl("^6|7|8|9", .$Clusters )) %>%
  filter(., .cell %in% WhichCells(., downsample = 352))
  #filter(grepl("^5|6|11|9", .$Clusters )) # epi groups for filtered DATA
    
table(DATA$Clusters)
table(DATA_sub$Clusters)

#########################
# DGEs ONE AGAINST REST #
#########################
# running DGE analysis on each cluster aginst the combination of all other clusters
DEGs_table <- DGEs_wilcox.fun(DATA_sub, "Clusters", comp = "ONEvsALL")

```

```{r plot_clustering_on_tissue, include=FALSE, eval=FALSE}
source("../bin/spatial_visualization.R")
library(patchwork)
clus <- c(scales::hue_pal()(8),
             RColorBrewer::brewer.pal(9,"Set1"),
             RColorBrewer::brewer.pal(8,"Set2"),
             RColorBrewer::brewer.pal(8,"Accent"),
             RColorBrewer::brewer.pal(9,"Pastel1"),
             RColorBrewer::brewer.pal(8,"Pastel2") )

plots <- DATA %>%
  mutate(group = orig.ident) %>%
  nest(., data = -group) %>%
  pmap(., 
    ~plot_spatial.fun(..2,
      sampleid = ..1,
      colors = clus,
      geneid = "Clusters",#"KRT15", #"PTPRC",#"sp_annot",#"CDH1",
      zoom = "zoom",
      img_alpha = 0,
      point_size = 1)
    )

legend <- get_legend(plots[[1]] + theme(legend.position="right"))
combined <- wrap_plots(plots, ncol=2) & theme(legend.position="none")
combined <- plot_grid( combined, legend, ncol = 2, rel_widths = c(1, .2)) 
combined
```

```{r save_DGEs}
##############
# SAVE FILES #
##############
# write_csv(DEGs_table, paste0(result_dir, "DGEs_clusters_wilcox.csv"))
DEGs_table <- read_csv(paste0(result_dir,"DGEs_clusters_wilcox.csv"))

DEGs_list <- DEGs_table %>% 
  filter(p_val < 0.9) %>%
  group_split(., group) %>% 
  set_names(., unique(DEGs_table$group))

write.xlsx(DEGs_list, keepNA=TRUE, na.string="NA", overwrite=TRUE,
           file=paste0(result_dir,"DGEs_clusters_wilcox",".xlsx"))
```

```{r volcano_plot_DGEs_perClus}
####################
# VOLCANOPLOT DEGs #
####################
DEGs_filt <- DEGs_table %>% 
  filter(p_val < 0.009) 
Volcano.fun_logFC(DEGs_filt, "group", y.axis="p-value", up=c(1, 0.001), down = c(-1, 0.001)) # labeling: (logFC, p-value)
```

## Identify marker genes to seperate clusters

```{r Get_best_markrs}
#######################################
# FILTER BY P-VAL logFC AND pct.diff #
######################################
# Identify the top genes that have a high difference in expression between the clusters
top20 <- DEGs_table %>%
  group_by(group) %>%
  top_n(-40, p_val_adj) %>%
  top_n(20, pct.diff) %>%
  top_n(10, log.pct.diff) 
  
top20 <- top20 %>%
  arrange(group)
# top25[grep("NCR1",top25$gene),]

# remove all VDJ-genes from list of HVG
remove <- str_subset(top20$gene, "^IGH|^IGK|^IGL|^TRA|^TRB|^TRD|^TRG")
top20_gr <- top20 %>%
  ungroup() %>%
  #filter(., !(.$gene %in% remove)) %>%
  group_by(group) %>%
  group_split() %>%
  set_names(., unique(top20$group))
```

```{r dotplott_top20_DEGs, fig.height=8.5, fig.width=8.27}
#| fig-format: pdf
# Select marker genes to seperate clusters
DATA <- DATA  %>%
  filter(grepl("^6|7|8|9", .$Clusters )) %>%
  mutate(., feature = .$Clusters)
ord <- niceRplots::getcluster(DATA, unique(top20$gene), "feature")

###################################
# DOTPLOT TOP 10 DOWN AND UP DEGs #
###################################
#pdf( paste0("./top_20_DEG_subset_epi.pdf"),width=8.27,height=length(ord)/6+2)
par(mfrow=c(1,1), mar=c(7,6,1,5))
plot_dots(DATA, names(sort(ord)), clustering = "feature", show_grid = T,main = "top cluster markers",cex.main=1,font.main=1,cex.col = 1,srt = 90,cex.row = 1.1)
abline(v=cumsum(c(table(sub( "_.*","",names(table(DATA$feature))))))+0.5)
#dev.off()
```

```{r barplot_top25_DGEs, fig.width=10, fig.height=6}
###################################
# BARPLOT TOP 10 DOWN AND UP DEGs #
###################################
par(mfrow=c(2, 5), mar = c(4, 6, 3, 1))
for (i in unique(top20$groups)[1:10]) {
    barplot(sort(setNames(top20$avg_log2FC, top20$gene)[top20$groups == i], F),
        horiz = T, las = 1, main = paste0(i, " vs. rest"), border = "white", yaxs = "i")
    abline(v = c(0, 0.25), lty = c(1, 2))
}
```

```{r UMAP_top10_markergenes_plot, include=TRUE, eval=TRUE}
#| fig-format: jpeg
################################
# UMAP TOP 10 DOWN AND UP DEGs #
################################
col=c("grey90","grey80","grey60","navy","black")

clus_plot <- plot_clusters.fun(DATA, red = "umapharmony", cluster="Clusters") + theme_void() + NoLegend()

grid_genes <- function(plot_list, title){
  title <- ggdraw() + draw_label(paste0("Top 10 Markers for Cluster ", title), fontface='bold')
  g <- plot_grid(plotlist = plot_list,
            ncol = 4)
  g_ <- plot_grid(title, g, ncol=1, rel_heights=c(0.1, 1))
  return(g_)
}

plots <- imap(top20_gr, "gene") %>%
  map(., map, ~plot_genes.fun(DATA, red = "umapharmony", .x, lable = "Clusters"))

cluster_markers <- plots %>%
  map(., ~c("Clusters"=list(clus_plot), .x)) %>%
  imap(., ~grid_genes(.x, .y ))

cluster_markers[[1]]

imap(cluster_markers, ~ggsave(paste0(marker_dir,"Marker_genes_cluster_", .y, ".jpg"), plot=.x))
ggsave(paste0(marker_dir,"Marker_genes_all_clusters", ".pdf"), gridExtra::marrangeGrob(grobs=cluster_markers, ncol=1, nrow=1))
```


## Session info

```{r}
sessionInfo()
```
